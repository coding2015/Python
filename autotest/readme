#!/usr/bin/python

'''
unittest module'
	The Python unit testing framework, also referred to as 'PyUnit', which is 
a Python version of Junit(Java version of Kent's Smalltalk testing framework)

'''

---------------------------------------------------------------
'基本概念'
'test-fixtures 测试固件'
		测试相关的准备工作和清理工作
		基于类TestCase创建，方法：
		setUp()		# 测试运行前调用
		tearDown()	# 测试结束后调用

'test-case 测试用例'
		最小的测试单元，基于TestCase构建
		多个测试用例可集中在一个类中定义:
			class xxx(unittest.TestCase):
				def testcase1(self):pass
				def testcase2(self):pass
				...
		注: 自动运行用例(命令行或inittest.mian()方式)只识别'test'打头命名的用例

'test-suite 测试用例集'
		通过类TestSuite 包含测试用例(TestCase)或测试用例集(TestSuite)

'test-runner 测试运行器'
		类TestRunner
		类TextTestRunner

----------------------------------------------------------------
'运行方式'
'命令行'
		运行一个模块里的测试用例：
		$ python -m unittest -v module
			# 自动实例化module中所有unittest.TestCase子类
			# 自化运行所有test打头的方法(包括各个用例运行前后的test-fixture)

'__main__入口'
		$ python module.py 以__main__方式运行模块
		通过 'unittest.main()' 实现同上个命令同样作用(但运行信息较少)

----------------------------------------------------------------
'TDD(Test Driven Development)'
		测试驱动开发
		敏捷开发，测试先行：
			先编写测试代码，再在其基础上通过基本迭代完成编码，并不断完善
		目的: 编写可用的、干净的代码 
		好处: 改进的设计，可测性增强，更低的耦合度， 更强的质量信心，更低的修复代价

----------------------------------------------------------------
'拓展学习'
		'test discover':
			运行当前目录下所有名字以'test'打头模块的测试用例, 仅支持python2.7+
			$ python -m unittest discover
			以__name__==`module`方式运行，过程产生.pyc文件
			
		'setuptools':
			可替代test-discover, 支持python2.7以下版本
			类似MakeFile,通过创建编辑setup文件组织运行
			运行过程产生xxx.egg-info相关文件
			$ python setup.py test
		https://setuptools.pypa.io/en/latest/index.html		

		'nose':
			改进的unittest测试框架，需另外安装
			比unittest:
				支持插件机制, eg: 统计测试覆盖
				兼容但不限于unittest测试用例
				Pythonic, 符合PEP8风格
				提供不同层次的test-fixture方案
				提供collector作为测试套件，统一unittest下测试套件不同的setup.py


			
			
