#!/usr/bin/python

chapter 11:
	Functions and Functional Programming

'difficulties'
	静态嵌套域

---------------------------------------------------
'函数'
		定义
			结构化或过程化的编程方法， 代码重用， 输入输出	
		
		返回
			[return]   	# 无return或单单return时，返回 None
			return obj 	# 返回obj 
			return obj1, obj2, ...	# 返回元组(obj1, obj2, ...)， 建议加上括号
		
		调用(操作符;())			
			xxx([args])

'函数定义(声明)'
		def  xxx(): 
			'function_documentation_string'
			function_body
				# 在Python中，函数声明即函数定义
				# Python无类似C的函数声明(声明与定义分开)

'函数属性'
		__doc__		# 函数文档，函数里紧跟在函数声明后的字符串，可在函数定义后修改
		__name__	# 函数名
		__module__	# 函数所在模块
		__class__	# 函数类型  == type(func)
		func_closure# 函数独有属性，若函数为闭包函数则该属性为cell元组，否则为None
		...			# 更多自带属性可用dir(funcname)查看
	
		xxxx		# 自定义属性，只能在函数外定义

		属性访问：
			help(func)	# 以文档方式显示函数声明及其文档
			func.xxx

' 函数参数'
		传参(函数调用)：
			func(val1, val2, ...)	
			func(*tuple_nonkw_args, **dict_kw_args)
			apply(func, args, kwargs)

		可变长参数
			(位置参数， 关键字参数， 可变长参数元组， 可变长关键字字典)
		   （pos-args, kw-args, *args, **kwargs）	

----------------------------------------------------
'内部/内嵌函数'
		在函数体内创建另一个函数

'Closure 闭包'
		对外部作用域(但不是全局作用域)的变量进行引用的内部函数
		访问自由变量

		自由变量：
			定义在外部函数但由内部函数引用或使用的变量
		    流浪作用域，封装的‘全局变量’

		判断闭包函数
			fun.func_closure 
			若fun的func_closure属性不为 None, 说明fun是一个闭包函数

		闭包函数属性
			func_closure
			xxx.func_closure -> tuple of cells
						# 闭包的每一个自由变量对应一个cell
						# 变量内容对应cell的cell_contents属性 
        应用：
            回调：返回闭包后调用闭包

----------------------------------------------------
'Decorator(装饰器)'
		 decorator(func/class/obj) -> function-obj
		 #返回一个函数对象的函数

		定义装饰器：
			def deco(func):
				decorating-block
				return function-obj	 # 返回函数对象
		用法：
			@deco	# 在被修饰的函数定义前加修饰符，@decorator_funtion_name
			def func(args):	pass
			-> func = deco(func)
			调用: func(args) ->  deco(fun)(args)

			@deco1
			@deco2
			def func(args):pass
			-> func = deco1(deco2(func))

			@deco1(deco-args)	#此时deco1可以不是装饰器，但其返回必须是装饰器
			@deco2
			def func(args):pass
			-> func = deco(deco-args)(deco2(func))

		应用：
			在描述符中定义并返回闭包，使得每个被装饰的对象转变为闭包
			这样每个对象都有其特定的数据(自由变量)，eg: 单例模式

		more:
			系统的装饰器： staticmethod, classmethod, etc.
			参考: https://www.python.org/dev/peps/pep-0318/ 

-----------------------------------------------------	
'generator 生成器'
		函数的迭代化, 使函数可以通过next()‘逐步’操作
	
		创建生成器
			1.函数法
				在函数中加 yield 语句, 有多少个 yield 即有多少个迭代元素
				def func(): 
					...
					yield statement1
					...
					yield statement2
					...
				func() -> generator
				generator.next() -> statement1
				generator.next() -> statement2
				...
			2.表达式法
				(expr for iter_var in iterable if cond_expr) -> generator
				eg:
					gen = (x**2 for x in range(10))
						等价于：
						def __gen(iterable):
							for x in iterable:
								yield x**2
						gen = __gen(iter(range(10)))
		
					max(len(line) for line in file if line.strip())
					sum(x*x for x in range(10) )	
					d = dict((k, func(k)) for k in keylist)
					
		生成器的方法:
			next()	# 获得下次生成值
			send(val) # 将值回送给生成器，作为yield语句的返回，并调用下一个yield
			throw(exception) # exception句法同raise, 抛出异常并关闭生成器
			close()	# 关闭生成器

		yield statement:
			仅用在函数中，用于构造生成器函数
				yield 42
				x = yield 42
				x = 12 + (yield 42)
			返回值：
				gen.next(): yield state -> None (在两个 next()之间没有 send()时)
				gen.send(val): yield state -> val 			

		参考：
		PEP342,  PEP0289

-----------------------------------------------------
'函数式编程'

lambda:
		匿名函数
		lambda args: expression
		-> def func(args):return expression		
		eg:
			map(lambda x:x**2, range(10))


函数式编程接口(BIF):
		apply(func[, args][,kargs])	 # == func(*args, **kargs),  逐渐弃用
		filter(func/None, seq) -> subseq # 返回子序列:items if func(item)
		reduce(func, seq[,init]) -> val # func(seq[n],func(...func(init,seq[0]))))
								 # len(*seq, init)=1, 则返回该元素，len=0则报错
		map(func/None,seq1,seq2,..)-> list # [func(seq1[i],seq2[i],...), ...]
							# map(None,seq1,seq2,...) == zip(seq1,seq2,...)

列表解析:
		[expr for iter_var in iterable if cond_expr]
		可取代部分 lambda 和 函数式编程接口
		eg: 
			map(lambda x:x**2, range(10))
				-> [x**2 for x in range(10)]
			map(func, seq)
				-> [func(x) for x in seq]
			filter(func, seq)
				-> [x for x in seq if func(x)]

偏函数(partial-function):
		functools.partial(func,*args, **kwargs) #固化func的参数值
		eg:
			add1 = partial(operator.add, 1)  # add1(x) == operator.add(1, x)
			baseTwo = partial(int, base=2) # 转换二进制字符串
									# baseTwo('1010') == int('1010', 2)
											
-------------------------------------------------------------
'作用域'
'静态嵌套域 Statically Nested Scopes'
'闭包自由变量'
		lambda 与作用域
			>>> def foo():
			...     y=5
			...     bar = lambda:x+y
			...     print bar()
			...     y=8
			...     print bar()
			... 
			>>> foo()
			15
			18
	
		参考：
		PEP227

----------------------------------------------------------------
'递归函数'
		自调, 有止

	
