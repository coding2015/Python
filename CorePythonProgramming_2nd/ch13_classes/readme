#!/usr/bin/python

chapter 13:
	Object-Oriented Programming


Questions:
	1. 为何在init中不允许返回对象或数值(只能返回None)
		TypeError: __init__() should return None, not 'Time60'
	2. _xx, __xx, __xx__ 私有变量


KeyPoints:

	Customization:
		__repr__():	
			交互模式时，创建无引用实例或输入实例名时将显示其值

---------------------------------------------------------------
'class attributes'
数据与方法皆属性， 二者切忌同名(一旦同名将出现一方覆盖另一方)	
	
		__str__(self):
			返回字符串对象，'print 实例'或'str(实例)'时调用

		__repr__(self)
			返回字符串对象，'>>> 实例'或'repr(实例)'或'`实例`'时调用
			实现时可调用 repr() 或 `` 来取对象的原值

		__call__(self, args) 
			可调用类对象, '实例()' 时调用
			应用：线程注册对象
			# 若定义了该属性, 则其实例可被调用
			# instance(args) -> instance.__call__(args)

		__getattr__(self, attr):
			授权(delegation), 将已存在的功能授权给对象的默认属性
			当解释器找不到当前实例的属性和类属性时，才调用该方法
			！该处的属性指ins.attr 句点方式访问的属性， repr(ins),str(ins)等不算
			'应用: 包装标准类型，eg: 添加创建、修改、访问属性'
			# 若覆盖(定义)该属性，可在定义中调用BIF：getattr(obj,attr)来实现授权
			# 注意: 操作符如'[]','+'等不是属性，无法授权，可以通过返回对象的方式操作
			# 多继承中属性的查找秩序见类属性__mro__

		__getattribute__(self, attr)
			新类属性，无论实例属性有无找到，都调用
			即只要采用句点方式访问的属性都会调用该方法
			# 注意：在该方法内采用self.xx 或type.__getattribute__的方式会陷入无穷递归
			# 可通过以下方式避免
				super(type, obj).__getattribute__(attr)
				== object/parent.__getattribute__(obj, attr)
				按__mro__顺序从obj开始搜寻属性

		__slots__
			新类属性，规定限制实例属性，替代实例的__dict__属性, 节约内存
			应用: 实例属性少但实例对象很多时，用__slots__替代__dict__可以明显节约内存
			eg: __slots__ = 'version' # 规定实例只能定义 version 属性
				__slots__ = ('foo', 'bar') # 规定实例只能定义 foo 和 bar 属性
			# 定义了__slots__ 属性，就不再存在实例的__dict__属性

		描述符
			包含以下属性之一的对象
	        	__get__(self, instance, type)  -> value #访问作为属性的描述符时调用
	        	__set__(self, instance, value)  -> None  #设置作为属性的描述符时调用
    	    	__delete__(self, instance)  -> None 
			实现机制: 通过__getattribute__转化
			分类:
				数据描述符: 同时包含__get__与__set__属性的对象
       			非数据描述符: 未覆盖__set__属性的对象
			函数/方法是非数据描述符
			自定义描述符:
				定义了以上一种或属性的新类, 其实例化对象可用作其他类的类属性
				# 当且仅当描述符作为其他类的类属性(即静态成员)时
				# 通过类实例增删改该类属性时， 才会调用以上3个属性
				# 增删改描述符实例或作为其他类的实例属性的描述符，以上属性不起作用
			应用: 类属性代理, 故描述符可视为属性
			属性优先级别(Attribute Precedence, 属性查找顺序):
				类属性
				数据描述符
				实例属性
				非数据描述符
				__getattr__()
			装饰器;
				property(fget[, fset[, fdel[, doc]]]) -> property attribute

		__metaclass__
			用来指定类模板(元类), 类中类，类为其元类的实例
			在元类定义中：
				元类建议继承(type)，否则需自定义__call__() 才能实例化类
				class Meta(type):
					def __init__(cls, name, bases, attrd):pass
						# name:cls的类名, bases:cls的父类， attrd:cls的属性
						# 可以在此限制cls的属性
					def __call__(cls, args):pass
						# 使cls可调用，即由此创建实例
						# 在基类type的__call__中默认调用了cls.__init__
						# 可以在此个性化实例，eg: 单例模式
						# cls因该属性而可调用，类似实例因在类中定义__call__变得可调用
			当指定了类的元类属性后，定义类结束时会调用对应元类的构造函数

		隐藏属性：
			'_'以单下划线打头
				可以访问，但不从能模块中导出(from module import *)
			'__'以双下划线打头
				私有变量，此时类命名空间中该变量的名字不是__xxx, 而是'_类名__xxx'

-----------------------------------------------------------------------
'相关BIF/module'
	super(type[, type2/obj]) -> super-obj # 代理授权访问父类属性， 只应用于新类
		super(type) -> unbound super-obj 
		super(type, type2) -> bound super-obj # 前提issubclass(type, type2)为真 
		super(type, obj) -> bound super-obj	# 前提isinstance(obj, type)为真
		
		可对返回值采用句点方式访问父类属性
		super(type, type2/obj).attr
		#注意：找的是type的父类属性（亦按__mro__进行搜寻，但掠过type及其继承者们）
		#且此时不会再去调用__getattribute__， 除非显示调用该属性
		super(type, type2).method()	== type的父类.method(type2) #调用类方法
		super(type, obj).method()	== type的父类.method(obj)	  #调用实例方法
