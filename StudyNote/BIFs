#!/usr/bin/python
'''
a quick view for file './BIFs'
'''

open(fname, mode='r', buffering=-1)	# 打开文件， 默认：读方式，使用系统缓冲机制
map(func, seq1,seq2,...) -> list  #返回序列的映射序列，序列个数==func参数个数
reduce(func, seq, init=None) -> value	#func为二元函数
filter(func, seq) ->subseq 	#返回子序列：items of func(item)==True 
compare rules
repr(val/cmd) or `val/cmd` -> value of val/cmd
float(str/num) -> float
hash(obj) -> integer (if hashable)
len(iterable) -> item numbers of iterable obj
max(seq) -> value
min(seq) -> value
sum(iterable) -> value
any(iterable) -> bool
all(iterable) -> bool
enumerate(iterable, count=0) -> enumerate-obj
range() -> list
xrange() -> iterator
reversed(seq) -> seq
sorted(iterable, cmp=None, key=None, reverse=False)
zip(seq1, seq2, seq3, ...)
locals() -> dict	#返回局部名字空间,变量或函数名作为键被引号包含，其值为键值
globals() -> dict	#返回全局名字空间	
vars([object]) -> dict #vars() == locals(), vars(object) -> object.dict
* round(num, precise=0) -> float	#四舍五入，precise精确位数
getattr(object, attr[,default]) -> object.attr / default
					# attr 需用引号包含起来，若object.attr不存在返回default

---------------------------------------------------------------------------
备注：
* round()
	'''
	>round(num,precise=0).四舍五入
			precise
				默认0，表精度为整数（仍为浮点数类型xxx.0)
				>0, 精度为小数点左数位数（小数位数）
				<0, 精度为小数点右边位数（整数位数）
		>int(n), math.floor(n),round(n)
			int(n):去小数部分
					n>0时，int(n)<=n; 
					n<0时，int(n)>=n
			floor(n):取小于n的最大整数（浮点数类型）
					无论n何值,floor(n)<=n
			round(n):四舍五入，取最接近n的整数（浮点数类型）
					n>0时，四舍<n,五入>n
					n<0时，四舍>n.五入<n
	'''
-------------------------------------------
